{"version":3,"sources":["components/ViewBookmarks/TokenCard.tsx","components/ViewBookmarks/ViewBookmarks.tsx"],"names":["TokenCard","React","memo","props","useState","visible","setVisible","localStorage","photoId","hiddened","setHiddened","handleCancel","hoverable","style","width","onClick","cover","alt","src","photoUrlC","photoUrlO","className","level","title","type","length","slice","onCancel","footer","notification","error","message","description","JSON","stringify","updateBookmarks","hidden","italic","ownerName","preview","tags","split","map","tag","i","keyboard","ViewTokensContainer","connect","state","isFetching","search","photosData","setPhotosData","paginatedPhotos","setPaginatedPhotos","currentPage","setCurrentPage","useEffect","pagTokens","items","current_page","per_page_items","offset","paginator","photos","key","push","parse","getItem","height","overflowY","photo","current","total","pageSize","onChange","page","image","Empty","PRESENTED_IMAGE_SIMPLE"],"mappings":"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","file":"static/js/5.a4fc4e00.chunk.js","sourcesContent":["import {Button, Card, Image, Modal, notification} from \"antd\";\r\nimport React, {FC, useEffect, useState} from \"react\";\r\nimport Title from \"antd/es/typography/Title\";\r\nimport Text from \"antd/es/typography/Text\";\r\n\r\nexport type PropsCardType = {\r\n    photoId: string\r\n    ownerName: string\r\n    title: string\r\n    description: string,\r\n    tags: string,\r\n    photoUrlO: string | null,\r\n    photoUrlC: string | null,\r\n    updateBookmarks?: () => void\r\n}\r\n\r\nconst TokenCard: FC<PropsCardType> = React.memo((props) => {\r\n    let [visible, setVisible] = useState<boolean>(false);\r\n    let [hiddened, setHiddened] = useState<boolean>(!!localStorage[props.photoId])\r\n\r\n    const handleCancel = () => {\r\n        setVisible(false)\r\n    }\r\n    const handleAddToBookmark = () => {\r\n        if(!localStorage[props.photoId]){\r\n            localStorage[props.photoId] = JSON.stringify({...props});\r\n            setHiddened(!!localStorage[props.photoId])\r\n            if(props.updateBookmarks) props.updateBookmarks();\r\n        }else{\r\n            notification.error({\r\n                message: 'Bookmark Error',\r\n                description:\r\n                    'You already have this bookmark.',\r\n            });\r\n        }\r\n    }\r\n    const handleDeleteFromBookmark = () => {\r\n        if(localStorage[props.photoId]){\r\n            delete localStorage[props.photoId];\r\n            setHiddened(!!localStorage[props.photoId])\r\n            if(props.updateBookmarks) props.updateBookmarks();\r\n        }else{\r\n            notification.error({\r\n                message: 'Bookmark Error',\r\n                description:\r\n                    'You havent this bookmark.',\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                hoverable\r\n                style={{width: 300}}\r\n                onClick={() => setVisible(true)}\r\n                cover={<img alt=\"example\"\r\n                            src={props.photoUrlC || props.photoUrlO || 'https://znaiwifi.com/wp-content/uploads/2018/01/hqdefault.jpg'}/>}\r\n            >\r\n                <div className='flex flex-col gap-8'>\r\n                    <Title level={4}>{props.title}</Title>\r\n                    <div>\r\n                        <Text type='secondary'>Click to card for view more information.</Text>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n            <Modal\r\n                visible={visible}\r\n                title={props.title.length > 50 ? props.title.slice(0, 50) + ' ...' : props.title}\r\n                onCancel={handleCancel}\r\n                width={1000}\r\n                footer={[\r\n                    <Button key=\"addToFav\" onClick={handleAddToBookmark} hidden={hiddened}>Add to bookmark</Button>,\r\n                    <Button key=\"remFav\" onClick={handleDeleteFromBookmark} hidden={!hiddened}>Delete from bookmark</Button>,\r\n                    <Button key=\"back\" onClick={handleCancel}>\r\n                        Close\r\n                    </Button>\r\n                ]}\r\n            >\r\n                <div className='flex flex-col items-start gap-2'>\r\n                    <Text italic={true} className='block'>Owner: {props.ownerName}</Text>\r\n                    <div className='flex gap-4 items-start justify-center'>\r\n                        {(props.photoUrlO || props.photoUrlC) &&\r\n                        // @ts-ignore\r\n                        <Image width={300} src={props.photoUrlO || props.photoUrlC} preview={false}/>}\r\n                        {props.description && <div style={{width: '600px'}}>\r\n                            <Text>{props.description}</Text>\r\n                        </div>}\r\n                    </div>\r\n                    <div className='flex flex-wrap justify-center'>\r\n                        {props.tags && props.tags.split(' ').map((tag, i) => <Text keyboard\r\n                                                                              className='block' key={i}>{tag}</Text>)}\r\n                    </div>\r\n\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n})\r\nexport default TokenCard","import React, {FC, useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport TokenCard, {PropsCardType} from \"./TokenCard\";\r\nimport {Empty, Pagination} from \"antd\";\r\n\r\ntype MapStateToPropsType = {\r\n    isFetching: boolean\r\n}\r\ntype MapDispatchToPropsType = {}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\n\r\nconst ViewBookmarks: FC<PropsType> = (props) => {\r\n    let [photosData, setPhotosData] = useState<PropsCardType[] | null>(null)\r\n    let [paginatedPhotos, setPaginatedPhotos] = useState<PropsCardType[] | null>(null)\r\n    let [currentPage, setCurrentPage] = useState<number>(1)\r\n\r\n    useEffect(() => {\r\n        updateBookmarks()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        let pagTokens = paginator(photosData, currentPage)\r\n        setPaginatedPhotos(pagTokens)\r\n    }, [photosData, currentPage])\r\n\r\n    function paginator(items: PropsCardType[], current_page: number, per_page_items: number = 21) {\r\n        let page = current_page\r\n        let per_page = per_page_items\r\n        let offset = (page - 1) * per_page\r\n        let paginatedItems = items?.slice(offset).slice(0, per_page_items);\r\n        return paginatedItems\r\n    }\r\n\r\n    const handlePageChanged = (page: number) => {\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    const updateBookmarks = () => {\r\n        let photos = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            let key = localStorage.key(i);\r\n            if (key !== null) {\r\n                photos.push(JSON.parse(localStorage.getItem(key) as string))\r\n            }\r\n        }\r\n        setPhotosData(photos);\r\n    };\r\n    if (props.isFetching) return <Preloader height={'490px'}/>\r\n    return (\r\n        <div className='flex justify-center pb-4 pt-2'>\r\n            {(paginatedPhotos && paginatedPhotos.length !== 0) && <div className='py-6 flex flex-col gap-4'>\r\n                <div className='grid grid-cols-3 gap-4 ' style={{height: '400px', overflowY: 'scroll'}}>\r\n                    {paginatedPhotos?.map(photo => (\r\n                        <TokenCard title={photo.title} description={photo.description}\r\n                                   photoUrlO={photo.photoUrlO ? photo.photoUrlO : null}\r\n                                   photoUrlC={photo.photoUrlC ? photo.photoUrlC : null}\r\n                                   photoId={photo.photoId} tags={photo.tags}\r\n                                   ownerName={photo.ownerName}\r\n                                   key={photo.photoId} updateBookmarks={updateBookmarks}/>\r\n                    ))}\r\n                </div>\r\n                <Pagination current={currentPage} total={photosData?.length} pageSize={21}\r\n                            onChange={handlePageChanged}/>\r\n            </div>}\r\n            {(!paginatedPhotos || paginatedPhotos.length === 0) && <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isFetching: state.search.isFetching\r\n})\r\nconst ViewTokensContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(MapStateToProps, {})(ViewBookmarks)\r\nexport default ViewTokensContainer"],"sourceRoot":""}