{"version":3,"sources":["components/common/Preloader/Preloader.module.css","components/common/Preloader/Preloader.jsx","API/api.js","redux/search-reducer.ts","hoc/withSuspense.js","components/NavBar/Navigation.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","Preloader","props","style","height","className","s","content","size","preloader","instance","axios","baseURL","headers","photosAPI","text","currentPage","get","actionsSearch","page","type","totalPages","photos","isFetching","searchText","initialState","searchTextMemory","getPhotosTC","act","dispatch","a","data","console","log","total","photo","searchReducer","state","action","withSuspense","Component","Suspense","fallback","Navigation","React","memo","location","useLocation","selectedKey","pathname","toLowerCase","split","useEffect","selectedKeys","mode","theme","Item","icon","to","SearchPageContainer","lazy","ViewBookmarksContainer","App","useState","visible","setVisible","ifvisible","on","Title","level","color","UserOutlined","Sider","width","exact","path","render","title","footer","borderTop","Text","italic","MainApp","compose","withRouter","connect","search","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fe840234.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__VM-OG\",\"content\":\"Preloader_content__R124X\"};","import React from 'react'\r\nimport s from \"./Preloader.module.css\";\r\nimport Spin from \"antd/es/spin\";\r\n\r\nexport default function Preloader(props) {\r\n    return (\r\n        <div style={{height: props.height}} className={s.content}>\r\n            <Spin size=\"large\" className={s.preloader}/>\r\n        </div>\r\n    );\r\n}","import * as axios from \"axios\";\r\n\r\nexport const api_key = '7b561199692b1ffc46c33900ae0b1e59';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://www.flickr.com/services/rest/',\r\n    headers: {}\r\n});\r\n\r\nexport const photosAPI = {\r\n    getPhotosData(text, currentPage) {\r\n        return instance.get(`?method=flickr.photos.search&api_key=${api_key}&text=${text}&extras=description%2Clicense%2Cowner_name%2Coriginal_format%2Ctags%2Curl_o%2Curl_c&per_page=21&page=${currentPage}&format=json&nojsoncallback=1`);\r\n    },\r\n};","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsTypes} from \"./redux-store\";\r\nimport {photosAPI} from \"../API/api\";\r\n\r\nexport const actionsSearch = {\r\n    setCurrentPage: (page: number) => ({\r\n        type: 'SET_CURRENT_PAGE',\r\n        page\r\n    }) as const,\r\n    setTotalPages: (totalPages: number) => ({\r\n        type: 'SET_TOTAL_PAGES',\r\n        totalPages\r\n    }) as const,\r\n    setPhotos: (photos: PhotoType[]) => ({\r\n        type: 'SET_PHOTOS',\r\n        photos\r\n    }) as const,\r\n    setIsFetching: (isFetching: boolean) => ({\r\n        type: 'SET_IS_FETCHING',\r\n        isFetching\r\n    }) as const,\r\n    setSearchTextMemory: (searchText: string) => ({\r\n        type: 'SET_SEARCH_TEXT_MEMORY',\r\n        searchText\r\n    })as const\r\n}\r\n\r\nexport type PhotoType = {\r\n    id: string,\r\n    owner: string,\r\n    secret: string,\r\n    server: string,\r\n    farm: number,\r\n    title: string,\r\n    ispublic: number,\r\n    isfriend: number,\r\n    isfamily: number,\r\n    license: string,\r\n    description: {\r\n        _content: string\r\n    },\r\n    ownername: string,\r\n    tags: string,\r\n    originalsecret?: string,\r\n    originalformat?: string,\r\n    url_o?: string,\r\n    height_o?: number,\r\n    width_o?: number,\r\n    \"url_c\"?: string,\r\n    \"height_c\"?: number,\r\n    \"width_c\"?: number\r\n}\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    currentPage: 1,\r\n    totalPages: null as number | null,\r\n    photos: null as PhotoType[] | null,\r\n    searchTextMemory: ''\r\n};\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actionsSearch>\r\n\r\nconst searchReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            };\r\n        case 'SET_TOTAL_PAGES':\r\n            return {\r\n                ...state,\r\n                totalPages: action.totalPages\r\n            };\r\n        case 'SET_PHOTOS':\r\n            return {\r\n                ...state,\r\n                photos: action.photos\r\n            };\r\n        case 'SET_IS_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case 'SET_SEARCH_TEXT_MEMORY':\r\n            return {\r\n                ...state,\r\n                searchTextMemory: action.searchText\r\n            };\r\n\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n\r\nexport const getPhotosTC = (text: string, currentPage: number, act: 'paginate' | 'search'): ThunkActionType => async (dispatch) => {\r\n    dispatch(actionsSearch.setIsFetching(true))\r\n    let data = await photosAPI.getPhotosData(text, currentPage)\r\n    data = data.data.photos;\r\n    console.log(data)\r\n    if(act === 'search') dispatch(actionsSearch.setSearchTextMemory(text))\r\n    dispatch(actionsSearch.setCurrentPage(currentPage))\r\n    dispatch(actionsSearch.setTotalPages(data.total))\r\n    dispatch(actionsSearch.setPhotos(data.photo))\r\n    dispatch(actionsSearch.setIsFetching(false))\r\n}\r\n\r\nexport default searchReducer;","import React from 'react';\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const withSuspense = (Component) => (props) => {\r\n    return (\r\n      <React.Suspense fallback={<Preloader height={'490px'}/>}>\r\n          <Component {...props}/>\r\n      </React.Suspense>\r\n    );\r\n};","import React, {FC, useEffect} from 'react';\r\nimport {Menu} from \"antd\";\r\nimport {NavLink, useLocation} from \"react-router-dom\";\r\nimport {FileSearchOutlined, StarOutlined} from \"@ant-design/icons/lib\";\r\n\r\ntype PropsType = {}\r\nconst Navigation: FC<PropsType> = React.memo((props) => {\r\n    let location = useLocation();\r\n    let selectedKey = location.pathname.toLowerCase().split('/')[1];\r\n    useEffect(() => {\r\n        selectedKey = location.pathname.toLowerCase().split('/')[1];\r\n    }, [location])\r\n\r\n    return (\r\n        <Menu\r\n            selectedKeys={[selectedKey]}\r\n            mode={'vertical'}\r\n            theme={'dark'}\r\n        >\r\n            <Menu.Item key=\"search\" icon={<FileSearchOutlined />}>\r\n                <NavLink to={`/search`}>Search</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"favourite\" icon={<StarOutlined />}>\r\n                <NavLink to={`/favourite`}>Bookmarks</NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n\r\n    );\r\n});\r\n\r\nexport default Navigation;","import {Avatar, Layout, Modal} from 'antd';\r\nimport React, {ComponentType, FC, useState} from 'react';\r\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\r\nimport './App.less';\r\nimport {withSuspense} from './hoc/withSuspense';\r\nimport Sider from \"antd/es/layout/Sider\";\r\nimport {Content} from 'antd/lib/layout/layout';\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from 'redux';\r\nimport Navigation from \"./components/NavBar/Navigation\";\r\nimport Title from \"antd/es/typography/Title\";\r\nimport {Footer, Header} from \"antd/es/layout/layout\";\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport Text from \"antd/es/typography/Text\";\r\n// @ts-ignore\r\nimport ifvisible from 'ifvisible.js';\r\n\r\nconst SearchPageContainer = React.lazy(() => import(\"./components/SearchPage/SearchPage\"));\r\nconst ViewBookmarksContainer = React.lazy(() => import(\"./components/ViewBookmarks/ViewBookmarks\"));\r\n\r\ntype MapStateToPropsType = {\r\n    isFetching: boolean\r\n}\r\ntype MapDispatchToPropsType = {}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\n\r\nconst App: FC<PropsType> = React.memo((props) => {\r\n    let [visible, setVisible] = useState<boolean>(false);\r\n    ifvisible.on(\"idle\", function () {\r\n        setVisible(true);\r\n    });\r\n    ifvisible.on(\"blur\", function(){\r\n        setVisible(true);\r\n    });\r\n    ifvisible.on(\"wakeup\", function () {\r\n        setVisible(false);\r\n    });\r\n    return (\r\n        <Layout className=\"App\">\r\n            <Header>\r\n                <div className='flex w-full items-center justify-between h-full'>\r\n                    <Title level={4} style={{color: 'white'}}>Image Finder</Title>\r\n                    <Avatar icon={<UserOutlined/>} size={30}/>\r\n                </div>\r\n            </Header>\r\n            <Layout>\r\n                <Sider width={300} theme={'dark'}>\r\n                    <Navigation/>\r\n                </Sider>\r\n                <Content>\r\n                    <Switch>\r\n                        <Route exact path='/'\r\n                               render={() => <Redirect to={\"/search\"}/>}/>\r\n\r\n                        <Route path='/search'\r\n                               render={withSuspense(SearchPageContainer)}/>\r\n                        <Route path='/favourite'\r\n                               render={withSuspense(ViewBookmarksContainer)}/>\r\n\r\n                        <Route path='*'\r\n                               render={() => <Redirect to={\"/search\"}/>}/>\r\n                    </Switch>\r\n                </Content>\r\n            </Layout>\r\n            <Modal\r\n                visible={visible}\r\n                title=\"Wake up please\"\r\n                footer={[]}\r\n            >\r\n                <p>You was inactive 60s or leave this page</p>\r\n            </Modal>\r\n            <Footer style={{borderTop: '1px solid grey'}}>\r\n                <div className='flex w-full items-center justify-center h-full'>\r\n                    <Text italic={true} className='block'>Made with <span\r\n                        style={{color: 'rgb(255, 255, 255)'}}>❤</span> by Ilya Taldykin<br/>\r\n                        Powered by Flickr</Text>\r\n                </div>\r\n            </Footer>\r\n        </Layout>\r\n    );\r\n})\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isFetching: state.search.isFetching\r\n})\r\nconst MainApp = compose<ComponentType>(\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(MapStateToProps, {})\r\n)(App)\r\n\r\nexport default MainApp;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport searchReducer from './search-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet rootReducer = combineReducers({\r\n    search: searchReducer,\r\n});\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        ethereum: any;\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <MainApp/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}